0x00 Global Config (2)
    概述：Vue.js 全局配置变量


0x01 Default Config Var (35)
    1、debug：开启调试模式
        type: boolean
        default: false
        Usage:
            Vue.config.debug = true

    2、delimiters：修改模板渲染定界符
        type: Array<String>
        defalult: ["{{", "}}"]
        Usage:
            Vue.config.delimiters = ['${', '}']

    3、unsafeDelimiters: 修改原生 HTML 插值定界符
        type: Array<String>
        default: ["{{{", "}}}"]
        Usage:
            Vue.config.unsafeDelimiters = ['!!', '!!']

    4、silent：取消Vue所有的日志与警告
        type: Boolean
        default: false
        Usage:
            Vue.config.silent = true

    5、async：异步模式
        type: Boolean
        defaule: true
        Usage:
            Vue.config.async = false

    6、devtools：配置是否允许 vue-devtools 检查代码
        type: Boolean
        default: true
        Usage:
            Vue.config.devtools = true


0x02 Global API (60)
    1、Vue.extend( options )：创建基础Vue构造器的子类，参数是一个对象，包含组件选项
        ** Note：el 和 data 选项在 Vue.extend() 中它们必须是函数

        Example：
            #html
            <div id="mount-point"></div>

            #js
            var Profile = Vue.extend({
                template: '<p>{{ firstName }} {{ lastName }} aka {{ alias }}</p>'
            });

            var profile = new Profile({
                data: {
                    firstName: 'choi',
                    lastName: 'c0hb1rd',
                    alias: 'cc'
                }
            });

            profile.$mount(' #mount-point' );

            #result
            <p>choi c0hb1rd aka cc</p>

    2、Vue.nextTick( callback )：延迟回调函数DOM更新在循环后执行，在修改数据之后立即使用这个方法，等待DOM更新

    3、Vue.set( object, key, value)：设置对象的属性和值

    4、Vue.delete( object, key)：删除对象的属性

    5、Vue.directive( id, [defintion])：注册或获取全局指令
        Example:
        #js
        Vue.directive('my-directive', {
            bind: function() {},
            update: function() {},
            unbind: function() {}
        })

        Vue.directive('my-directive' function() {
            //this will be called as 'update'
        })

        //Get Already Regeister Command
        Vue.myDirective = Vue.directive('my-directive')

    6、Vue.elementDirective( id, [definition])：注册或获取全局的元素指令

    7、Vue.filter( id, [definition] )：注册或获取全局过滤器

    8、Vue.component( id, [definition] )：注册或获取全局组件

    8、Vue.transition( id, [hooks] )：注册或获取全局的过渡钩子对象

    9、Vue.partial( id, [partial] )：注册或获取全局的partial

    10、Vue.use( plugin, [options] )：安装 Vue 插件，这个插件是一个对象，必须实现 install 方法

    11、Vue.mixin( mixin )：全局应用一个混合，将影响所有 Vue 实例，插件作者可以用它向组件注入自定义逻辑


0x03 Options / data (92)
    1、data：Vue 实例的数据对象，Vue.js 会递归将 data 的全部属性转为 getter / setter, 从而让它能响应数据变化
        **Note：这个对象必须是原生对象
        (1)访问：通过 $data 可以访问原生对象数据和通过赋值对象更新对象数据
        (2)获得原始数据对象：把 $data 传入 JSON.parse(JSON.stringify( $data )) 得到原始数据对象

    2、props：组件实例的作用域是孤立的，因此不应该在子组件中直接引用父组件的数据，所以可以通过 props 把数据传递给子组件
        Example:
        #html
        <child msg="hello"></child>

        #js
        Vue.component('child', {
            props: ['msg'],
            template: '<span>{{ msg }}</span>'
        })

        #result:
        <span>hello</span>

    3、propsData：只能在 new 一个 Vue 实例时使用
        Example:
        #html
        <div id="mount-point"></div>

        #js
        var Comp = Vue.extend({
            props: ['msg'],
            template: '<div>{{ msg }}</div>'
        })

        var vm = new Comp({
            el: '#mount-point',
            propsData: {
                msg: 'hello'
            }
        })

        #result
        <div id="mount-point">hello</div>

    4、computed：实例的计算属性
        Example:
        #js
        var vm = new Vue({
            data: { a: 1 },
            computed: {
                aDouble: function () {
                    return this.a * 2
                },
                aPlus: function () {
                    get: function () {
                        return this.a + 1
                    },
                    set: function (v) {
                        return this.a + v
                    }
                }
            }
        })

    5、methods：实例方法，实例可以直接访问这些方法，也可以用在指令表达式内，方法的 this 自动绑定到实例
        Example:
        #js
        var vm = new Vue({
            data: { a: 1 },
            methods: {
                plus: function () {
                    this.a++
                }
            }
        })

    6、watch：返回以某个对象作为参数后，函数执行完毕这个对象的结果
        Example:
        #js
        var vm = new Vue({
            data: { a: 1 },
            watch: {
                'a': fcuntion (val, oldVal) {
                    console.log('new %s, old %s', val, oldVal)
                },
                // xxxx 指某个函数名
                'b': 'xxxx',
                // 深度 watcher，可以返回对象内部值的变化情况
                'c': {
                    handler: function (val, oldVal) {

                    },
                    deep: true
                }
            }
        })


0x04 Options / DOM (8)
    1、el：实例挂载元素，值可以是返回 HTML 元素的函数，可以时 CSS 选择器，可以是 HTML 标签
        (1)访问：使用 Vue.$el 可以访问挂载值
        (2)手动挂在：Vue.$mount('mount-point') 可以在 Vue 对象实例化后挂载

    2、template：实例模板元素，模板元素会把挂载元素替换掉，除非声明 replace 为 false
        **Note：常用的模板使用方法是用 '<script type="x-template"></script>' 包含模板

    3、replace：实例模板替换元素，决定模板是否替换挂载元素，只能与 template 一起使用，默认值为 true


0x05 Opions / Lifecycle Hooks (26)
    1、init：在实例开始初始化是同步调用
        **Note：此时数据观测，事件和 watcher 都尚未初始化

    2、created：在实例创建之后同步调用
        **Note：此时实例已经结束解析，意味着建立数据绑定，计算属性，方法，watcher / 时间回调，但还没有开始 DOM 编译，$el 还不存在

    3、beforeCompile：在编译 DOM 开始之前调用

    4、compiled：在 DOM 编译结束后调用
        **Ｎote：此时所有指令已经生效，数据变化开始触发 DOM 更新，但是 $el 不一定存在

    5、ready：在 DOM 编译结束后和 $el 第一次插入文档之后调用
        **Note：必须是由 $appendTo() 等方法或指令更新才能触发，直接操作 $el 不会触发这个 hooks

    6、attached：在 $el 插入 DOM 时调用
        **Note：必须是由 $appendTo() 等方法或指令更新才能触发，直接操作 $el 不会触发这个 hooks

    7、detached：$el 从 DOM 中删除时调用
        **Note：必须是由指令或实例方法删除，直接操作 $el 不会触发这个 hooks

    8、beforeDestory：在实例开始销毁是调用
        **Note：此时实例仍然有功能

    9、destroyed：在实例被销毁时调用
        **Note：此时所有的绑定和实例的指令已经解绑，所有的实例已经被销毁


0x06 Options / Assets (11)
    1、directives：一个对象，包含指令,

    2、elementDirecives：一个对象，包含元素指令

    3、fiters：一个对象，包含过滤器

    4、component：一个对象，包含组件

    5、transitions：一个对象，包含过渡

    6、partials：一个对象，包含 partial


0x07 Ｏptions / Misc
    1、parent：指定实例的父实例
        **Ｎote：子实例被推入父实例的 $children 数组中
        (1)访问父实例：通过 this.$parent 访问

    2、events：监听事件对象，键是绑定的事件，值是对应的回调函数
        (1)绑定生命周期事件：
        Ｅxample：
        #js
        var vm = new Vue({
            events: {
                'hook:created': function () {
                    console.log('created!')
                },
                greeting: function (msg) {
                    console.log(msg)
                },
                bye: 'bye'
            },
            methods: {
                sayGoodbye: function () {
                    console.log('goodbye!')
                }
            }
        })

    3、mixins：混合对象数组，
