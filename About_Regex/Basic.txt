1、转义字符（元字符）:
    (1).：匹配除换行符之外的任意字符
    (2)\w：匹配字母或数字或下划线或汉字
    (3)\s：匹配任意的空白符
    (4)\d：匹配数字
    (5)\b：匹配单词的开始或结束，例：\btest\b
    (6)^：匹配字符串的开始
    (7)$：匹配字符串的结束，与7联用，例：^test$
	(8)\kname：匹配命名为name的分组捕获的字符

2、限定符：
    (1)*：重复0次或无数次
    (2)+：重复1次或无数次
    (3)?：重复0次或一次
    (4){n}：重复某个匹配格式n次
    (5){n,}：重复某个匹配格式n次或无数次
    (6){n,m}：重复某个匹配格式n次到m次

3、分支条件：用“|”符合隔开的匹配格式，当前一个匹配格式无匹配时，才会执行下一个匹配，类似编程里“或”的意思

4、分组：在一个表达式中分出一个子表达式，就叫分组，用"()"来分割，括号里的表达式为子表达式，比如匹配IP，表达式可以这么写，(2[0-4]|25[0-9]|[01]?\d\d?\.){3}(2[0-4]|[25[0-9]]|[01]?\d\d?)

5、反义（转义字符的反义）：
    (1)\W：匹配任意不是字母，数字，下划线，汉字的字符
    (2)\S：匹配任意不是空白符的字符
    (3)\D：匹配任意不是数字的字符
    (4)\B：匹配不是单词开头或结束的位置
    (5)[^x]：匹配除了x以外的任意字符
    (6)[^aeiou]：匹配除了aeiou以外的任意字符

6、反向引用：在一个有子表达式的表达式中，每个子表达式都是一个组，每个组都有一个组号，从左到右依次由数字1开始编号，0为整个表达式，而组号可以代替所属组捕获的字符，比如(\d{2})\1，这个表达式的用途为先捕获两个数字，再捕获与这两个数字所匹配的字符
注：组号的分配是先从所有未命名的分组开始分配，再从所有命名的分组开始分配，分配顺序都是从左到右，因此命名分组的组号要大于未命名分组

7、分组语法：
	(1)(exp)：匹配exp，并将捕获的字符存放到所属组
	(2)(?<name>exp)：匹配exp，并为该组命名为name，可以用\kname调用该组，“<>”也可以用“''”代替
	(3)(?:exp)：匹配exp，但不将捕获的字符放进该组，也不给该组分配组号
	
8、断言：匹配某一指定位置中的内容，这个内容必须满足一定条件（断言）
	(1)(?=exp)：零宽正预测先行断言，匹配断言之前的内容，比如^\w+(?=ing)$，匹配一个含有ing的单词，并捕获ing前面的部分
	(2)(?<=exp)：零宽正回顾后发断言，匹配断言之后的内容，比如^(?<=un)\w+$，匹配包含un的单词，并捕获un后面的部分
	(3)(?!exp)：零宽度负预测先行断言，匹配断言之前的内容，但内容之后不能是所断言的表达式，比如\d{3}(?!\d)，匹配三个数字并且三个数字之后不能是数字，捕获断言前的部分
	(4)(?<!exp)：零宽度负回顾后发断言，匹配断言之后的内容，但内容之前不能是所断言的表达式，比如(?<!\d)\d{3}，匹配三个数字并且这三个数字之前不能是数字，捕获断言后的部分


9、注释：(?#content)，content为注释的内容，注释会在表达式正式生效时被忽略

10、贪婪算法与懒惰算法：贪婪算法指尽可能多的匹配，一般在贪婪算法后加？会变成懒惰算法，尽可能少的匹配模式
	(1).*：尽可能多的匹配任意字符串，比如aabbadb，在表达式为a.*b的情况下，捕获的部分为aabbadb
	(2).*?：尽可能少的匹配任意字符串，比如aabbadb，在表达式为a.*?b的情况下，捕获的部分为aab
	
11、处理选项：
	(1)IgnoreCase：忽略大小写
	(2)Multiline：多行模式，更改“^”与“$”的含义，使他们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配
	(3)Singleline：单行模式，更改“.”的含义，使它与每一个字符匹配，包括“\n”换行符
	(4)IgnorePatternWhitespace：忽略空白，忽略表达式中的非转义空白并启用#标记的注释
	(5)ExplicitCapture：显示捕获，仅捕获已被显示命名的组

12、平衡组/递归匹配：
	这部分看不懂

13、其它转义字符：
	\a	报警字符(打印它的效果是电脑嘀一声)
    \b	通常是单词分界位置，但如果在字符类里使用代表退格
    \t	制表符，Tab
    \r	回车
    \v	竖向制表符
    \f	换页符
    \n	换行符
    \e	Escape
    \0nn	ASCII代码中八进制代码为nn的字符
    \xnn	ASCII代码中十六进制代码为nn的字符
    \unnnn	Unicode代码中十六进制代码为nnnn的字符
    \cN	ASCII控制字符。比如\cC代表Ctrl+C
    \A	字符串开头(类似^，但不受处理多行选项的影响)
    \Z	字符串结尾或行尾(不受处理多行选项的影响)
    \z	字符串结尾(类似$，但不受处理多行选项的影响)
    \G	当前搜索的开头
    \p{name}	Unicode中命名为name的字符类，例如\p{IsGreek}
    (?>exp)	贪婪子表达式
    (?<x>-<y>exp)	平衡组
    (?im-nsx:exp)	在子表达式exp中改变处理选项
    (?im-nsx)	为表达式后面的部分改变处理选项
    (?(exp)yes|no)	把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no
    (?(exp)yes)	同上，只是使用空表达式作为no
    (?(name)yes|no)	如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no
