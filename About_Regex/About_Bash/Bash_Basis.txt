0x01 命令别名与快捷键
	1、查看与设定别名，alias：
		命令格式：alias [new_name]=[command] 
		备注：不同于编程语言，等号前后不能空格，可以通过修改环境变量配置文件“~/.bashrc”（针对当前用户的配置文件），永久生效别名
	2、删除别名，unalias：
		命令格式：unalias [aliasname]
		备注：针对配置文件中的别名删除是临时的，下次重启终端时，配置文件里保存的别名依旧生效
	3、常用快捷键：
		(1)ctrl + c：强制终止
		(2)ctrl + L：清屏
		(3)ctrl + a：光标移动到命令行首
		(4)ctrl + e：光标移动到命令行尾
		(5)ctrl + u：从光标所在位置删除到行首
		(6)ctrl + z：把命令放入后台（fg可以使命令继续执行）
		(7)ctrl + r：在历史命令中检索

0x02 历史命令及其调用
	1、查看所有正确退出终端前的历史命令，history：
		命令格式：history [options] [save_file]
		options：
			(1)-c：清空历史命令
			(2)-w：把缓存手动写入历史命令保存文件（~/.bash_history）
		save_file：默认为“~/bash_history”
		备注：默认保存1000条命令，可以通过修改“~/.bashrc”或“/etc/profile”里HISTSIZE的值来修改保存的命令上限
	2、历史命令调用操作：
		(1)使用上、下肩头翻阅之前的命令
		(2)使用“!n”执行第n条历史命令
		(3)使用“!!”执行上一条命令
		(4)使用“!string”执行最后一条以该字符串开头的命令

0x03 输出输入重定向
	1、标准输出重定向，默认输出设备为显示器，文件描述符为1：
		命令格式：[command] [> | >>] [file]
		> | >>：“>”表示替换掉file里面的所有内容，“>>”表示追加续写分i了里面的内容
		备注：把command执行的结果重定向到指定的文件，可以理解为保存到指定的文件里，说白了就是C里面的stdin（standard）
	2、标准错误输出重定向，默认输出设备为显示器，文件描述符为2：
		命令格式：[command] [2> | 2>>] [file]
		备注：同C里面的stderr（stadnard error）
	3、标准输入重定向，默认输入设备为键盘，文件描述符为0：
		命令格式：[command] [< file | << prompt(*.?)prompt]
		prompt(*.?)prompt：prompt为任意标志符（两个必须一样，第一个表示起始符，第二个表示结束符），(*.?)是正则的一种算法，表示返回两个prompt之间的所有字符，这里指任意字符的意思，比如“[command] << ||string||”，把“||”之间的内容string作为输入
		备注：当command所指代的程序或者工具需要输入时，把输入从键盘重定向为file或标志符之间的内容

0x04 逻辑操作符
	1、分隔符“；”：作为命令结束符分隔命令
	2、逻辑与“&&”：与操作符，比如“[cmd_1] && [cmd_2]”中，当cmd_1正确执行，则执行cmd_2，当cmd_1执行错误，则不执行cmd_2
	3、逻辑或“||”：或操作符，比如“[cmd_1] || [cmd_2]”中，当cmd_1正确执行，则不执行cmd_2，当cmd_1执行错误，则执行cmd_2
	备注：可以结合逻辑与和逻辑或判断，格式为“[cmd] && echo yes || echo no”，当命令正确执行，返回yes，当命令错误执行，返回no，注意“&&”与“||”位置，上面这种判断方式“&&”必须在“||”之前
	
0x05 管道符
	概述：管道这个概念在linux shell是非重重要的，它可以把上一条命令的执行结果作为下一个命令的操作对象，可以多管道把多命令连接起来
	管道符，“|”：
		shell格式：[cmd_1] | [cmd_2]
		备注：把命令cmd_1执行后返回的结果作为cmd_2的操作对象，比如“ls [path] | grep [string]”，在ls的结果中匹配符合string的内容，在这里cmd_1必须有输出内容返回结果，cmd_2必须能对某个对象进行操作

0x06 通配符
	1、?：匹配一个任意字符
	2、*：匹配0个或任意多个字符
	3、[]：匹配中括号中任意一个字符，比如[abc]，匹配a或者b或者c
	4、[-]：匹配日中括号中任意一个字符，-代表一个range（范围），比如[a-z]
	5、[^]：逻辑非，表示不匹配括号内的字符，比如[^0-9]，表示不匹配数字字符
	6、``：反引号，反引号之间的内容视为系统命令
	7、$()：同反引号，括号内为系统命令
	8、#：注释
	9、$：用来访问变量的值
	10、\：转义符
	备注：shell里的双引号和单引号作用类python，在引号内的内容视为字符串

That's all.
