0x00 Define Var:
    var x int
    var x string
    var x float

    var x int = 1          <=>   v := 1 (type int)
    var x str = "string"   <=>   x := "string"  (type string)
    var x float = 1.0      <=>   x := 1.0 (type float)


0x01 Define Array:
    var x [n]int
    var x [n]string
    var x [n]float


0x02 Define Slice:
    var x = [n]int{}       <=>   x := [n]int{}
    var x = [n]string{}    <=>   x := [n]string{}
    var x = [n]float{}     <=>   x := [n]float{}

    Index of slice can be hidden:
    var x = []int{}        <=>   x := []int{} (length is 0, type is []int)   <=>   var x []int

    Slice can contain another slice:
    var x = [][]int {
        []int{},
        []int{},
    }

    Example:
    var gameBoard = [][]string {
        []string{"__", "__", "__"}
        []string{"__", "__", "__"}
        []string{"__", "__", "__"}
    }

    fmt.Printf("[*]Length is %d, type is %T.\n", len(gameBorad), gameBoard)
    ---------------------------------------------------------------------
    [*]Length is 3, type is [][]string.
    ---------------------------------------------------------------------

    Generated a slice via make functions:
    var x = make([]int, len)
    var x = make([]int, len, cap)
    x := make([]int, len)
    x := make([]int, len, cap)
    "len" is the current length, "cap" is the max length

    Add a new elements:
    var x = []int{}
    x = append(x, n)
    //append(slice, valueTypeOfSlice)


0x03 Define struct:
    type myStruct struct {
        field_1 type,
        field_2 type,
        ...
    }
    x := myStruct{
        value1,
        value2
    }
    y := x.field_1 (value1)
    z := x.field_2 (value2)


0x04 Define map:
    Before use map, need to make it:
    var x map[key_type]value_type
    x = make(map[key_type]value_type)
    x[key_type] = value_type(xxxxx)

    Example:
    var x map[string]string
    x = make(map[string][string])
    x["first"] = "hello,world"

    Use it without make:
    var x = map[key_type]value_type
    var x = map[key_type]value_type{
        key_type(xxx): value_type(xxx),
        key_type(xxx): value_type(xxx),
        ...,
    }

    Example:
    var x = map[string]string {
        "first": "hello",
        "second": "world",
        ...
    }

    Use struct to be key type or value type:
    type myStruct struct {
        filed_1 type
        filed_2 type
    }
    var x = map[myStruct][myStruct]{
        myStruct{field_1, field_2}: myStruct{field_1, field_2},
        myStruct{field_1, field_2}: myStruct{field_1, field_2},
        ...,
    }

    Example:
    type list struct {
        v int
        s string
    }
    var x = map[int]list{
        0: list{1, "hello"},
        1: list{2, "world"},
    }
    fmt.Println(x)
    ---------------------------------------------------------------------
    map[0:{1, "hello"} 1:{2, "world"}]
    ---------------------------------------------------------------------

    Delete a element:
    var x = map[string]string {
        "key": "value"
    }
    delete(x, key)


0x05 Define function:
    func myFunction(x type) {
        //method
    }

    func myFunction(x, y type, z type) return_type {
        //method
        return valueTypeOfReturnType
    }

    Use functions like a Right Value:
    func myFunction(x type) {
        //method
    }
    myNewFunction := myFunction (myNewFunction method body as same as myFunction)


0x06 For loop:
    for statement1; condition; statement2 {
        //loop body
    }

    for ; condition; statement2 {
        //loop body
    }

    for statement1; condition; {
        //loop body
    }

    Like C's while:
    for condition {
        //loop body
    }

    Iteration map of slice via range:
    var x = map[key_type]value_type
    for key, value range x{
        //loop body
    }

    var x = []int{}
    for index, element range x {
        //loop body, map as same as this
    }
    for index range x{
        //hidden value, map as same as this
    }
    for _, element range x{
        //hidden index, map as same as this
    }

    Function closure:
    func myFuncrion() func (type_1, ...) type {
        x := n
        return func (y type_1, ...) type {
            x += y
            return type(x)
        }

    }
    myNewFunction1 := myFunction()
    myNewFunction2 := myFunction()
    //myNewFunction1 and myNewFunction2 has different return value.


0x07 If-else:
    if condition {
        //body
    } else if condition {
        //body
    } else {

    }


0x08 Switch and fallthrough
    switch statement {
        case x:
        case y:
        case z:
        default:
    }

    switch {
        case condition_x:
        case condition_y:
        case condition_z:
        default:
    }

    If define "fallthrough" end of case body, the switch will continue execute the next branch
    switch statement {
        case x:
            fallthrough
        case y:
            fallthrough
        case z:
            fallthrough
        default:
    }


0x09 Pointer:
    As same as C's pointer, but in golang  has no pointer arithmetic
    x := 1
    p := &x
    *p = 2

    Pointers to struct:
    type myStruct struct { field_1 type, ..., }
    y := &myStruct
    z := y.field


0x10 Methods:
    Go does not have classes, but you can define methods on types:
    Example:
    package main

    import "fmt"


    type Person struct {
        name string
        age int
        sex string
    }

    func (x Person) getName() string {
        return x.name
    }

    func (x Person) getAge() int {
        return x.age
    }

    func (x Person) getSex() string {
        return x.sex
    }

    func main() {
        me := Person{"c0hb1rd", "21", "Male"}
        fmt.Println("My name is", me.getName(), ".");
        fmt.Println("I'm", me.getAge(), "years old.");
        if me.getSex == "male" {
            fmt.Println("I'm a boy.")
        } else {
            fmt.Println("I'm a girl.")
        }
    }
    ---------------------------------------------------------------------
    My name is c0hb1rd.
    I'm a 22 years old.
    I'm a boy.
    ---------------------------------------------------------------------

    Before define methods for base date-type , need to type a new name with it:
    type NewString string
    func (x NewString) MyMethod() {
        //method body
    }
    x := NewString
    x.MyMethod()


0x11 Interface:
    type MyInterface interface {
        MyMethod1() type
        ...
    }

    var x MyInterface
    //x must implement the MyMethod1()
    type MyStruct struct {}
    func (x MyStruct) SayGoodbye() {}
    y := MyStruct{}
    x = y
    x.SayGoodbye()

    Hidden interface:
    type ShowInterface1 interface {
        Method()1
        Method()2
    }

    type ShowInterface2 interface {
        Method()3
        Method()4
    }

    type HiddenInterface interface{
        ShowInterface1
        ShowInterface2
    }

    Empty interface, it may hold values of any type:
    var i interface{}
    i = int(x) (type int)
    i = string(y) (type string)

    But if not empty interface:
    var i interface{} = "string"
    f, judge := i.(string) //f = string, judge = true
    f, judge := i.(int) //f = 0 (type string), judge = false
    f := i.(int) //error!!

    Empty interface with switch:
    func do(i interface{}) {
        switch i.(type) {
            case int:
            case string:
            ...
            default:
        }
    }


0x12 String():
    Like python's "__str__":
    Example:
    type MyStruct struct {
        field_1 type
    }

    func (x MyStruct) String() {
        return fmt.Sprintf("what you wanna output")
    }

    func main() {
        v := MyStruct{ field_1 }
        fmt.Println(v)
    }
    ---------------------------------------------------------------------
    what you wanna output
    ---------------------------------------------------------------------


0x13 Error():
    Like String(), when function return an error value, it will invoke Error() to return error information:
    Example:
    import {
        "time"
        "fmt"
    }

    type MyError string

    func (x *MyError) Error() string {
        return fmt.Sprintf("At %v: %s", time.Time(), "Some error")
    }

    func MySqrt(x float64) (float64, error)

    func main() {
        if i, err := MySqrt(-4); err != nil {
            fmt.Println(err)
        } else {
            fmt.Println(i)
        }
    }
    ---------------------------------------------------------------------
    "At xxxx: Some error."
    ---------------------------------------------------------------------


0x14 Readers:
    A I/O interface, implement Read([] byte) (n int, err error) method which accept a slice buffer to read I/O data stream and returns the number of byte
    Example:
    package main
    import (
        "fmt"
        "string"
        "io"
    )

    func main() {
        reader := string.NewReader("Goodbye, world.")

        buffer = make([] byte, 8)
        for {
            len, err = reader.Read(buffer)
            fmt.Printf("[*]Buffer read length = %d\n", len)
            fmt.Printf("[*]Buffer current content = %q", buffer[:len])
            if err == io.EOF {
                break
            }
            fmt.Println()
        }
    }
    ---------------------------------------------------------------------
    [*]Buffer read length = 8
    [*]Buffer current content = "Goodbye,"
    [*]Buffer current content = [71 111 111 100 98 121 101 44]

    [*]Buffer read length = 7
    [*]Buffer current content = " world."
    [*]Buffer current content = [32 119 111 114 108 100 46]

    [*]Buffer read length = 0
    [*]Buffer current content = ""
    [*]Buffer current content = []
    ---------------------------------------------------------------------

0x15 Goroutine:
    A lightweight thread managed by the go runtime
    func someWork() {
        //method body
    }
    go someWork() //a new thread to run this function

    Run a anonymous function:
    go func() {
        //method body
    }

0x16 Channel:
    Cnannels are a typed conduit through which you can send and receive values with the channel operator '<-'
    Like map and slice, channels must be created before use:
    const BUFFER_SIZE int = 8
    ch1 := make(chan int)
    ch2 := make(chan int, bufferSize) //Sends to a buffered channel block only when the buffer is full
                                      //Receive block when the buffer is empty

    range and close:
    const BUFFER_SIZE int = 8
    ch := make(chan int, BUFFER_SIZE)
    for i := 1; i <= BUFFER_SIZE; i++ {
        ch <- i
    }
    close(ch) //Close a channel indicate that no more values will be sent
              //If do not that, the goroutines are asleep and become a deadlock
    for value := range ch {
        fmt.Println(value)
    }
    ---------------------------------------------------------------------
    1
    2
    3
    4
    5
    6
    7
    8
    ---------------------------------------------------------------------

0x17 Select:
    The selete statement lets a goroutine wait on multiple communication operations.
    A select blocks until one of its cases can run, then it execute that case.
    It chooses one at random if multiple are ready.
    Example:
    package main

    import "fmt"

    func fibonacci(c, quit chan int) {
        x, y := 0, 1
        for {
            select {
            case c <- x: //(1) 直到可以发送x到channel里面，不然一直阻塞，与(2)对应
                x, y = y, x+y
            case <-quit: //当可以从quit中接收数据流，执行这个case，终止loop
                fmt.Println("Quit")
                return
            }
        }
    }

    func main() {
        c := make(chan int)
        quit := make(chan int)

        go func() {
            for i := 0; i < 10; i++ {
                fmt.Println(<-c) //(2)这个线程开始阻塞，直到能从c这个channel里面接收到数据流，与(1)对应
            }
            quit <- 1
        }()

        fobonacci(c, quit)
    }
    ---------------------------------------------------------------------
    0
    1
    1
    2
    3
    5
    8
    13
    21
    34
    Quit
    ---------------------------------------------------------------------

    But if select statement have the default case, it will never blocks thread
    selecr {
    case condition_1:
    case condition_2:
    default:
        //statement
    }

0x18 Binary Tree:
    tour.golang.org/concurrency/8 example:
    package main

    import (
	   "golang.org/x/tour/tree"
	      "fmt"
	)

    // Walk walks the tree t sending all values
    // from the tree to the channel ch.
    func Walk(t *tree.Tree, ch chan int) {
    	if t.Left != nil {
    		Walk(t.Left, ch)
    	}
    	if t.Right != nil {
    		Walk(t.Right, ch)
    	}
    	ch <- t.Value
    }

    // Same determines whether the trees
    // t1 and t2 contain the same values.
    func Same(t1, t2 *tree.Tree) bool {
    	ch1, ch2 := make(chan int), make(chan int)
    	go Walk(t1, ch1)
    	go Walk(t2, ch2)
    	var sh1, sh2 []int
    	for i := 0; i < 10; i++{
    		sh1 = append(sh1, <-ch1)
    		sh2 = append(sh2, <-ch2)
    	}
    	for i := 0; i < 9; i++ {
    		for j := 0; j < 9 - i; j++ {
    			if sh1[j] > sh1[j+1] {
    				tmp := sh1[j]
    				sh1[j] = sh1[j+1]
    				sh1[j+1] = tmp
    			}
    			if sh2[j] > sh2[j+1] {
    				tmp := sh2[j]
    				sh2[j] = sh2[j+1]
    				sh2[j+1] = tmp
    			}
    		}
    	}
    	for i := 0; i < 10; i++ {
    		if sh1[i] != sh2[i] {
    			return false
    		}
    	}
    	return true
    }

    func main() {
    	ch := make(chan int)
    	go Walk(tree.New(1), ch)
    	for i := 0; i < 10; i++ {
    		fmt.Println(<-ch)
    	}
    	t1 := tree.New(1)
    	t2 := tree.New(1)
    	fmt.Println(Same(t1, t2))

    }
    ---------------------------------------------------------------------
    2
    1
    4
    3
    6
    8
    9
    7
    5
    10
    true
    ---------------------------------------------------------------------

0x19 Sync.Mutex:
    One of mutex in golang
    When you just wanna make sure only one goroutine can access a variable at a time to avoid conficts
    if has two methods:
    Lock() and Unlock()
    Example:
    package main

    import "sync"

    type SafeVar struct {
        x int
        mux sync.Mutex
    }

    func main() {
        c := SafeVar{x: 1}
        for i := 0; i < 1000; i++ {
            go func(){
                c.mux.Lock()
                c.x++
                c.mux.Unlock()
            }()
        }
    }

That's all.
